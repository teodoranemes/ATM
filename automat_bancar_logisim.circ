<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="1.0"/>
  </circuit>
  <vhdl name="unitate_centrala">library ieee ;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;   


entity unitate_centrala is
	port
	( start, clk, reset, operatie1, operatie2, confirm, validare_pin, validare_operatie, validare_suma, validare_retragere, finalizare_operatie,  finalizare_afisare, finalizare_depunere, operatie_noua: in std_logic;
	enable_pin, enable_operatie, enable_afisare, enable_depunere, enable_retragere, enable_schimbare, enable_suma, enable_scazator, final: out std_logic
	);
end unitate_centrala;		  

architecture arch_unitate_centrala of unitate_centrala is	

type stari is (asteapta, introducere_pin, alegere_operatie, afisare_sold, urmatoarea_operatie, depunere_numerar, depunere_bancnote, sold_nou, retragere_numerar, eliberare_bancnote, schimbare_pin, finalizare);
signal stare, nxt_stare: stari;

begin

actualizare_stare: process(reset, clk)
	begin
		if(reset = '1') then
			stare&lt;= asteapta;
		elsif clk'event and clk = '1' then
			stare &lt;= nxt_stare; 
		end if;
	end process;

tranzitii: process(stare)
	begin
		enable_pin &lt;= '0';
		enable_operatie &lt;= '0';
		enable_afisare &lt;= '0'; 
		enable_depunere &lt;= '0';
		enable_retragere &lt;= '0';
		enable_schimbare &lt;= '0';
		enable_suma &lt;= '0';

	case stare is
	
		when asteapta =&gt;
			if (start = '1') then
				enable_pin &lt;= '1';
				nxt_stare &lt;= introducere_pin;
			else
				nxt_stare &lt;= asteapta;
			end if;

		when introducere_pin =&gt;
			if (validare_pin = '1') then
				enable_operatie &lt;= '1';
				nxt_stare &lt;= alegere_operatie;
			else 
				nxt_stare &lt;= introducere_pin;
			end if;
			
		when alegere_operatie =&gt;
			if ( validare_operatie = '1') then 
				if ( operatie1 = '0' and operatie2 = '0') then
					enable_afisare &lt;= '1';
					nxt_stare &lt;=afisare_sold;
				end if;
				if ( operatie1 = '0' and operatie2 = '1') then
					enable_depunere &lt;= '1';
					nxt_stare &lt;=depunere_numerar;
				end if;
				if ( operatie1 = '1' and operatie2 = '0') then
					enable_retragere &lt;= '1';
					nxt_stare &lt;=retragere_numerar;
				end if;
				if ( operatie1 = '1' and operatie2 = '1') then
					enable_schimbare &lt;= '1';
					nxt_stare &lt;=schimbare_pin;
				end if;
			else 
				nxt_stare &lt;=alegere_operatie;
			end if;

		when afisare_sold =&gt;
			if (finalizare_afisare = '1') then
				nxt_stare &lt;= urmatoarea_operatie;
			else nxt_stare &lt;= afisare_sold;
			end if;
			
		when depunere_numerar =&gt;
			enable_suma &lt;= '1';
			nxt_stare &lt;= depunere_bancnote;

		when depunere_bancnote =&gt;
			if(finalizare_depunere = '1') then
				nxt_stare &lt;= sold_nou;
			else nxt_stare &lt;= depunere_bancnote;
			end if;

		when retragere_numerar =&gt;
			if (validare_suma = '1') then
				enable_scazator &lt;= '1';
				nxt_stare &lt;= eliberare_bancnote;
			end if;
		
	    when eliberare_bancnote =&gt;
	    		if (validare_retragere = '1') then
	    			nxt_stare &lt;= sold_nou;
	    		else nxt_stare &lt;= eliberare_bancnote;
	    		end if;

	    	when sold_nou =&gt;
	    		if( finalizare_operatie = '1') then
	    			nxt_stare &lt;= urmatoarea_operatie;
	    		else nxt_stare &lt;= sold_nou;
	    		end if;
	    			
		when urmatoarea_operatie =&gt;
			if (operatie_noua = '1') then
				nxt_stare &lt;= asteapta;
			else nxt_stare &lt;= finalizare;
			end if;
	end case;
				

	end process;
	
end arch_unitate_centrala;
</vhdl>
</project>
