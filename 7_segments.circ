<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="1.0"/>
  </circuit>
  <vhdl name="afisor_7">
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
use IEEE.STD_LOGIC_UNSIGNED.all; 
&#13;
ENTITY afisor_7 IS&#13;
  PORT (
  		&#13;Cifra1, Cifra2, Cifra3, Cifra4: in std_logic_vector(3 downto 0);
  		Clk: in std_logic;
  		Anod: out std_logic_vector(3 downto 0);
  		Catod: out std_logic_vector(6 downto 0)
    );&#13;
END afisor_7;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE arch_afisor OF afisor_7 IS&#13;
&#13;
signal Numar: std_logic_vector (15 downto 0);
signal An: std_logic_vector (3 downto 0);

BEGIN&#13;
&#13;PROCESS(Clk)
	BEGIN
	 	IF (Clk'event and Clk='1') THEN
	 		Numar &lt;= Numar + 1;
	 	END IF; 	
END PROCESS;


PROCESS(Clk)
	BEGIN
	 	IF (Clk'event and Clk='1') THEN
	 		  case (Numar(15 downto 14)) is
        			when "00" =&gt; An&lt;=Cifra1; Anod&lt;="1110";
        			when "01" =&gt; An&lt;=Cifra2; Anod&lt;="1101";
        			when "10" =&gt; An&lt;=Cifra3; Anod&lt;="1011";
        			when "11" =&gt; An&lt;=Cifra4; Anod&lt;="0111";
        			when others =&gt; An&lt;="1111"; Anod&lt;="0000";
    			end case;

	 	END IF; 	
END PROCESS;

PROCESS(Clk)
BEGIN
    IF (Clk'event and Clk='1') THEN
        case (An) is
                when "0001" =&gt; Catod&lt;="1111001";	  
                when "0010" =&gt; Catod&lt;="0100100";	 
                when "0011" =&gt; Catod&lt;="0110000";	  
                when "0100" =&gt; Catod&lt;="0011001";	  
                when "0101" =&gt; Catod&lt;="0010010";	  
                when "0110" =&gt; Catod&lt;="0000010";	  
                when "0111" =&gt; Catod&lt;="1111000";	  
                when "1000" =&gt; Catod&lt;="0000000";	  
                when "1001" =&gt; Catod&lt;="0010000";	  
                when "1010" =&gt; Catod&lt;="0001000";	  
                when "1011" =&gt; Catod&lt;="0000011";	  
                when "1100" =&gt; Catod&lt;="1000110";	  
                when "1101" =&gt; Catod&lt;="0100001";	  
                when "1110" =&gt; Catod&lt;="0000110";	  
                when "1111" =&gt; Catod&lt;="0001110";	  
                when others =&gt; Catod&lt;="1000000";	  
        end case;
    end if;
end process;

END arch_afisor;&#13;
</vhdl>
</project>
