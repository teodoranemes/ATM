<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="1.0"/>
  </circuit>
  <vhdl name="memorie_ram">&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
use IEEE.std_logic_arith.all;
use IEEE.STD_LOGIC_UNSIGNED.all; 
&#13;
ENTITY memorie_ram IS&#13;
  PORT (&#13;
		Rand: in std_logic_vector(0 to 3);
		Col: in std_logic_vector(0 to 1);
		Enable, We: in std_logic;
		Intrare: in std_logic_vector(0 to 15);
		Iesire: out std_logic_vector(0 to 15)
    );&#13;
END memorie_ram;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF memorie_ram IS&#13;
signal Output: std_logic_vector(0 to 15);
subtype Cont is std_logic_vector(0 to 47);
type Memorie is array(0 to 9) of Cont;
signal Mem:Memorie:=
("111110101100001000110011010000011110011110100100",
 "111001110011110010110100110001100001000000000000",
 "011100101000010001000111000001101101001011100010",
 "110100100010100100011010100010010010101010001011",
 "010010001100010010101011100011111010001100000111",
 "000110100000001000110000101001000000100111001010",
 "101010110000101001111111101111001100000011101001",
 "111011111000011100100100001101001011101110101010",
 "100000100000000010111110010000001100100011010100",
 "101010011001001100101100110111101110010110011011");

BEGIN&#13;
&#13;PROCESS(Rand, Col, We)
variable Iterator: integer range 0 to 9;
BEGIN
	Iterator := conv_integer(Rand);
	IF (We = '1') THEN
		case Col is
			when "00" =&gt; Mem(Iterator)(0 to 15) &lt;=Intrare;
			when "01" =&gt; Mem(Iterator)(16 to 31) &lt;=Intrare;
			when "10" =&gt; Mem(Iterator)(32 to 47) &lt;=Intrare;
			when others =&gt; null;
		end case;
	ELSE
		case Col is
			when "00" =&gt; Output&lt;=Mem(Iterator)(0 to 15);
			when "01" =&gt; Output&lt;=Mem(Iterator)(16 to 31);
			when "10" =&gt; Output&lt;=Mem(Iterator)(32 to 47);
			when others =&gt; null;
		end case;
		
	END IF;
	Iesire&lt;=Output;
END PROCESS;
END TypeArchitecture;&#13;
</vhdl>
</project>
