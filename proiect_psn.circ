<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="1.0"/>
    <comp loc="(1030,200)" name="memorie_ram">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1150,610)" name="scazator">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1400,210)" name="numarator_stari">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1750,940)" name="afisor_7">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(370,460)" name="numarator_zecimal">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(380,310)" name="debouncer">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(390,140)" name="divizor_frecventa">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(430,870)" name="introducere_pin">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(780,620)" name="sumator">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
  </circuit>
  <vhdl name="debouncer">

LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY debouncer IS&#13;
  PORT (&#13;
  	Clk, S_in: in std_logic;
  	S_out: out std_logic
    );&#13;
END debouncer;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE arch_debouncer OF debouncer IS&#13;
&#13;signal delay1, delay2, delay3: std_logic;
BEGIN&#13;
	PROCESS(Clk)
	BEGIN
		IF (Clk'event and Clk = '1') THEN
			delay1 &lt;= S_in;
			delay2 &lt;= delay1;
			delay3 &lt;= delay2;
		END IF;
	END PROCESS;
	S_out &lt;= delay1 and delay2 and delay3;

END arch_debouncer;&#13;
</vhdl>
  <vhdl name="divizor_frecventa">

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY divizor_frecventa IS
  PORT (
 	Clk_in: in std_logic;
 	Clk_out: out std_logic
    );
END divizor_frecventa;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE arch_divizor OF divizor_frecventa IS

signal counter: integer:=1;
signal temp: std_logic:='0';

BEGIN
PROCESS (Clk_in)
BEGIN 
	IF (Clk_in'event and Clk_in='1') THEN
		counter &lt;= counter+1;
	END IF;
	IF (counter=10) THEN
		temp &lt;= NOT temp;
		counter &lt;= 1;
	END IF;
	Clk_out &lt;= temp;
END PROCESS;	


END arch_divizor;
</vhdl>
  <vhdl name="afisor_7">
LIBRARY ieee;
USE ieee.std_logic_1164.all;
use IEEE.STD_LOGIC_UNSIGNED.all; 

ENTITY afisor_7 IS
  PORT (
  		
Cifra1, Cifra2, Cifra3, Cifra4: in std_logic_vector(3 downto 0);
  		Clk: in std_logic;
  		Anod: out std_logic_vector(3 downto 0);
  		Catod: out std_logic_vector(6 downto 0)
    );
END afisor_7;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE arch_afisor OF afisor_7 IS

signal Numar: std_logic_vector (15 downto 0);
signal An: std_logic_vector (3 downto 0);

BEGIN

PROCESS(Clk)
	BEGIN
	 	IF (Clk'event and Clk='1') THEN
	 		Numar &lt;= Numar + 1;
	 	END IF; 	
END PROCESS;


PROCESS(Clk)
	BEGIN
	 	IF (Clk'event and Clk='1') THEN
	 		  case (Numar(15 downto 14)) is
        			when "00" =&gt; An&lt;=Cifra1; Anod&lt;="1110";
        			when "01" =&gt; An&lt;=Cifra2; Anod&lt;="1101";
        			when "10" =&gt; An&lt;=Cifra3; Anod&lt;="1011";
        			when "11" =&gt; An&lt;=Cifra4; Anod&lt;="0111";
        			when others =&gt; An&lt;="1111"; Anod&lt;="0000";
    			end case;

	 	END IF; 	
END PROCESS;

PROCESS(Clk)
BEGIN
    IF (Clk'event and Clk='1') THEN
        case (An) is
                when "0001" =&gt; Catod&lt;="1111001";	  
                when "0010" =&gt; Catod&lt;="0100100";	 
                when "0011" =&gt; Catod&lt;="0110000";	  
                when "0100" =&gt; Catod&lt;="0011001";	  
                when "0101" =&gt; Catod&lt;="0010010";	  
                when "0110" =&gt; Catod&lt;="0000010";	  
                when "0111" =&gt; Catod&lt;="1111000";	  
                when "1000" =&gt; Catod&lt;="0000000";	  
                when "1001" =&gt; Catod&lt;="0010000";	  
                when "1010" =&gt; Catod&lt;="0001000";	  
                when "1011" =&gt; Catod&lt;="0000011";	  
                when "1100" =&gt; Catod&lt;="1000110";	  
                when "1101" =&gt; Catod&lt;="0100001";	  
                when "1110" =&gt; Catod&lt;="0000110";	  
                when "1111" =&gt; Catod&lt;="0001110";	  
                when others =&gt; Catod&lt;="1000000";	  
        end case;
    end if;
end process;

END arch_afisor;
</vhdl>
  <vhdl name="sumator">
LIBRARY ieee;
USE ieee.std_logic_1164.all;
use IEEE.STD_LOGIC_UNSIGNED.all;
 use IEEE.std_logic_arith.all;

ENTITY sumator IS
  PORT (
  	N1, N2, N3, N4, M1, M2, M3, M4: in std_logic_vector(3 downto 0);
  	Enable: in std_logic;
  	R1, R2, R3, R4: out std_logic_vector(3 downto 0)
    );
END sumator;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE arch_sumator OF sumator IS

BEGIN

PROCESS (N1, N2, N3, N4, M1, M2, M3, M4, Enable) 
variable T1, T2, Rez: integer range 0 to 10000;
BEGIN
	IF (Enable = '1') THEN 
		T1:= 500*conv_integer(N1)+100*conv_integer(N2)+50*conv_integer(N3)+10*conv_integer(N4);
		T2:= 1000*conv_integer(M1)+100*conv_integer(M2)+10*conv_integer(M3)+conv_integer(M4);
		Rez:= T1+T2;
		R4&lt;=conv_std_logic_vector(Rez mod 10, 4);
		R3&lt;=conv_std_logic_vector((Rez/10) mod 10, 4);
		R2&lt;=conv_std_logic_vector((Rez/100) mod 10, 4);
		R1&lt;=conv_std_logic_vector((Rez/1000) mod 10, 4);
	END IF;


END PROCESS;
END arch_sumator;
</vhdl>
  <vhdl name="scazator">LIBRARY ieee;
USE ieee.std_logic_1164.all;
use IEEE.STD_LOGIC_UNSIGNED.all;
 use IEEE.std_logic_arith.all;

ENTITY scazator IS
  PORT (
  	N1, N2, N3, N4, M1, M2, M3, M4: in std_logic_vector(3 downto 0);
  	Enable: in std_logic;
  	R1, R2, R3, R4: out std_logic_vector(3 downto 0)
    );
END scazator;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE arch_scazator OF scazator IS

BEGIN

PROCESS (N1, N2, N3, N4, M1, M2, M3, M4, Enable) 
variable T1, T2, Rez: integer range 0 to 10000;
BEGIN
	IF (Enable = '1') THEN 
		T1:= 1000*conv_integer(N1)+100*conv_integer(N2)+10*conv_integer(N3)+conv_integer(N4);
		T2:= 1000*conv_integer(M1)+100*conv_integer(M2)+10*conv_integer(M3)+conv_integer(M4);
		Rez:= T1-T2;
		R4&lt;=conv_std_logic_vector(Rez mod 10, 4);
		R3&lt;=conv_std_logic_vector((Rez/10) mod 10, 4);
		R2&lt;=conv_std_logic_vector((Rez/100) mod 10, 4);
		R1&lt;=conv_std_logic_vector((Rez/1000) mod 10, 4);
	END IF;


END PROCESS;
END arch_scazator;
</vhdl>
  <vhdl name="numarator_zecimal">LIBRARY ieee;
USE ieee.std_logic_1164.all;
use IEEE.STD_LOGIC_UNSIGNED.all;


ENTITY numarator_zecimal IS
  PORT (
 		Clk, Reset: in std_logic;
 		Nr_out: out std_logic_vector(3 downto 0)
    );
END numarator_zecimal;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE arch_num_zec OF numarator_zecimal IS
BEGIN
	PROCESS(Clk, Reset)
	VARIABLE Rez: std_logic_vector(0 to 3);
	BEGIN
		IF(Reset = '1') THEN
			 Rez := "0000";
		ELSIF (Clk = '1') AND (Clk'event) then
                        Rez := Rez + "0001";
                        IF (Rez &gt; "1001") THEN
                            Rez := "0000";
                        END IF;
        	END IF;	
	Nr_out &lt;= Rez;
	END PROCESS;
END arch_num_zec;
</vhdl>
  <vhdl name="memorie_ram">
LIBRARY ieee;
USE ieee.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.STD_LOGIC_UNSIGNED.all; 

ENTITY memorie_ram IS
  PORT (
		Rand: in std_logic_vector(3 downto 0);
		Col: in std_logic_vector(1 downto 0);
		Enable, We: in std_logic;
		Intrare: in std_logic_vector(15 downto 0);
		Iesire: out std_logic_vector(15 downto 0)
    );
END memorie_ram;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF memorie_ram IS
signal Output: std_logic_vector(0 to 15);
subtype Cont is std_logic_vector(0 to 47);
type Memorie is array(0 to 9) of Cont;
signal Mem:Memorie:=
("111110101100001000110011010000011110011110100100",
 "111001110011110010110100110001100001000000000000",
 "011100101000010001000111000001101101001011100010",
 "110100100010100100011010100010010010101010001011",
 "010010001100010010101011100011111010001100000111",
 "000110100000001000110000101001000000100111001010",
 "101010110000101001111111101111001100000011101001",
 "111011111000011100100100001101001011101110101010",
 "100000100000000010111110010000001100100011010100",
 "101010011001001100101100110111101110010110011011");

BEGIN

PROCESS(Rand, Col, We)
variable Iterator: integer range 0 to 9;
BEGIN
	Iterator := conv_integer(Rand);
	IF (We = '1') THEN
		case Col is
			when "00" =&gt; Mem(Iterator)(0 to 15) &lt;=Intrare;
			when "01" =&gt; Mem(Iterator)(16 to 31) &lt;=Intrare;
			when "10" =&gt; Mem(Iterator)(32 to 47) &lt;=Intrare;
			when others =&gt; null;
		end case;
	ELSE
		case Col is
			when "00" =&gt; Output&lt;=Mem(Iterator)(0 to 15);
			when "01" =&gt; Output&lt;=Mem(Iterator)(16 to 31);
			when "10" =&gt; Output&lt;=Mem(Iterator)(32 to 47);
			when others =&gt; null;
		end case;
		
	END IF;
	Iesire&lt;=Output;
END PROCESS;
END TypeArchitecture;
</vhdl>
  <vhdl name="numarator_stari">LIBRARY ieee;
USE ieee.std_logic_1164.all;
use IEEE.STD_LOGIC_UNSIGNED.all;


ENTITY numarator_stari IS
  PORT (
 	Clk, Enable, Reset, Sens: in std_logic;
 	Operatie: out std_logic_vector (2 downto 0) 
    );
END numarator_stari;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE arch_num_stari OF numarator_stari IS

BEGIN

PROCESS(Clk, Reset, Enable)
	variable Op: std_logic_vector(0 to 2);
	BEGIN
		IF (Reset = '1') THEN
			Op := "000";
		ELSE
			IF (CLK = '1' AND CLK'EVENT) THEN
				IF (Sens = '0') THEN
					IF (Op = "100") THEN
						Op := "000";
					ELSE
						Op := Op + "001";
					END IF;
				ELSE
					IF (Op = "000") THEN
						Op := "100";
					ELSE
						Op := Op - "001";
					END IF;
				END IF;
			END IF;	
		END IF;
		Operatie &lt;= Op;
	END PROCESS;
END arch_num_stari;
</vhdl>
  <vhdl name="introducere_pin">
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY introducere_pin IS&#13;
  PORT (&#13;
 		clk, enable, validare: in std_logic;
 		pin1, pin2, pin3, pin4: in std_logic;
 		pin_final: out std_logic_vector(3 downto 0)
    );&#13;
END introducere_pin;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE arch_pin OF introducere_pin IS&#13;
&#13;
BEGIN&#13;
process(clk, enable, validare)
begin
	if (enable = '1' and validare = '1') then
&#13;		pin_final(0) &lt;= pin1;
		pin_final(1) &lt;= pin2;
		pin_final(2) &lt;= pin3;
		pin_final(3) &lt;= pin4;
	end if;
&#13;end process;
END arch_pin;&#13;
</vhdl>
  <vhdl name="pin">library ieee ;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

library components;
use components.all;


entity input_pin is
	port(enable,clock: in std_logic;
	confirm: in std_logic;
	PIN3: in std_logic;
	PIN2: in std_logic;
	PIN1: in std_logic;
	PIN0: in std_logic;
	PIN_4b: out std_logic_vector(3 downto 0);
	PIN_16b: out std_logic_vector(15 downto 0));
end input_pin;


architecture input_pin_arh of input_pin is

component controlled_buffer2 is
	port(A : in std_logic_vector(3 downto 0); 
	EN: in std_logic;
	Y:out std_logic_vector(3 downto 0));
end component;

component counter_stay is
	generic(nr_biti: natural :=4;
		max_value: natural :=8);
port(clk:	in std_logic;
	R:	in std_logic;
	EN:	in std_logic;
	Q:	out std_logic_vector(nr_biti-1 downto 0);
	Carry: out std_logic);
end component;

component pin_cod is
	port(PIN: in std_logic_vector(3 downto 0);
	PIN_codificat: out std_logic_vector(15 downto 0));
end component;

component registru is
generic(nr_biti: natural :=4);
port(clk:	in std_logic;
	R:	in std_logic;
	EN:	in std_logic;
	D:  in std_logic_vector(nr_biti-1 downto 0);
	Q:	out std_logic_vector(nr_biti-1 downto 0));
end component;

component controlled_buffer is
	port(A : in std_logic_vector(15 downto 0); 
	EN: in std_logic;
	Y:out std_logic_vector(15 downto 0));
end component; 

component inverter is
port(A: in std_logic;
	Y: out std_logic);	
end component;

signal out_counter: std_logic_vector(0 downto 0);
signal out_inverter, x: std_logic;
signal out_pin_cod: std_logic_vector(15 downto 0);
signal carry_numarator: std_logic;
signal xd: std_logic_vector(3 downto 0);
begin
	
	C1: counter_stay
	generic map(1, 1)
	port map(clock, out_inverter, confirm, out_counter, carry_numarator);	
	
	C2:inverter
	port map(enable, out_inverter);
	
	
	C3: registru
	generic map(4)
	port map(
	clk=&gt;clock, 
	R=&gt;'0',
	EN=&gt;enable,
	D(3)=&gt;PIN3,
	D(2)=&gt;PIN2,
	D(1)=&gt;PIN1,
	D(0)=&gt;PIN0,
	Q=&gt;xd(3 downto 0));	
	
	Sheeesh: controlled_buffer2
	port map(xd,'1',PIN_4b);
	
	C4: pin_cod
	port map(
	PIN(3)=&gt;PIN3,
	PIN(2)=&gt;PIN2,
	PIN(1)=&gt;PIN1,
	PIN(0)=&gt;PIN0,
	PIN_codificat=&gt;out_pin_cod);
	
	C5: controlled_buffer 
	port map(out_pin_cod, enable, PIN_16b(15 downto 0));
	
	end architecture;
	
	
	
	
	
	
</vhdl>
  <vhdl name="inverter">library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity inverter is
	port(A: in std_logic;
	Y: out std_logic);
end inverter;

architecture inverter_arh of inverter is
begin
	process(A)
	begin
		Y &lt;= not A;
	end process;
end inverter_arh;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity inverter2 is
	port(A: in std_logic_vector(6 downto 0);
	Y: out std_logic_vector(6 downto 0));
end inverter2;

architecture inverter2_arh of inverter2 is
begin
	process(A)
	begin
		Y &lt;= not A;
	end process;
end inverter2_arh;

 library IEEE; 
use IEEE.STD_LOGIC_1164.all;
use IEEE.STD_LOGIC_UNSIGNED.all;

entity controlled_buffer5 is
	port(A : in std_logic_vector(0 downto 0); 
	EN: in std_logic;
	Y:out std_logic_vector(0 downto 0));
end controlled_buffer5;

	
	
architecture buffer5_arh of controlled_buffer5 is
begin
Y &lt;= A when (EN = '1') else (others =&gt; 'Z');
end buffer5_arh;	


 library IEEE; 
use IEEE.STD_LOGIC_1164.all;
use IEEE.STD_LOGIC_UNSIGNED.all;

entity controlled_buffer is
	port(A : in std_logic_vector(15 downto 0); 
	EN: in std_logic;
	Y:out std_logic_vector(15 downto 0));
end controlled_buffer;

	
	
architecture buffer_arh of controlled_buffer is
begin
Y &lt;= A when (EN = '1') else (others =&gt; 'Z');
end buffer_arh;	


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;	

entity and2 is
	port(A: in std_logic;
	B: in std_logic;
	Y: out std_logic);
end and2;

architecture and_arh of and2 is
begin
		Y&lt;=  A and B;
end and_arh;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;	

entity and2_bneg is
	port(A: in std_logic;
	B: in std_logic;
	Y: out std_logic);
end and2_bneg;

architecture and2bneg_arh of and2_bneg is
begin
		Y&lt;=  A and not B;
end and2bneg_arh;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all; 

entity or2 is
	port(A: in std_logic;
	B: in std_logic;
	Y: out std_logic);
end or2;

architecture or_arh of or2 is
begin
		Y &lt;=  A or B;
end or_arh;

library IEEE; 
use IEEE.STD_LOGIC_1164.all;
use IEEE.STD_LOGIC_UNSIGNED.all;

entity d_latch is
	port(D, clk, R, EN: in std_logic;
	Q: out std_logic);
end d_latch;

architecture dlatch_arh of d_latch is
begin
	process(EN, R, Clk)
	variable iesire: std_logic :='0';
	begin
		if R='0' then
			if(EN = '1') then
				if(rising_edge(clk)) then
					iesire:=D;
				end if;
			end if;
		else
			iesire:='0';
		end if;
Q&lt;=iesire;
end process;
end dlatch_arh;

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;


entity mux_n is
 generic(nr_sel : natural :=2;
         nr_biti : natural := 16);
port ( A : in  std_logic_vector((2**nr_sel*nr_biti-1) downto 0);
      sel: in std_logic_vector(nr_sel-1 downto 0);
       Y : out std_logic_vector(nr_biti-1 downto 0));
end mux_n;

architecture muxn_arh of mux_n is
begin
Y &lt;= A(nr_biti*(to_integer(unsigned(sel))+1) - 1 downto nr_biti*(to_integer(unsigned(sel)))); 
end muxn_arh;


library ieee ;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;


entity counter_stay is
generic(nr_biti: natural :=4;
		max_value: natural :=8);
port(clk:	in std_logic;
	R:	in std_logic;
	EN:	in std_logic;
	Q:	out std_logic_vector(nr_biti-1 downto 0);
	Carry: out std_logic
);
end counter_stay;

architecture counter_stay_arh of counter_stay is
begin
    process(clk, EN, R)
	variable count: std_logic_vector(nr_biti-1 downto 0):=(others =&gt; '0');
	variable reached: std_logic :='0';
    begin
	if R = '1' then
 	    count := (others =&gt; '0');
		 reached:='0';
	elsif (clk='1' and clk'event) then 
		if EN = '1' then
			if (count &lt; max_value) then
		count := count + 1;	
		if (count = max_value) then
		reached:='1';
		end if;
		end if;
	end if;
	end if;
	Q &lt;= count;
	Carry &lt;= reached;
    end process;
end counter_stay_arh; 



library ieee ;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;


entity counter_wrap is
generic(nr_biti: natural :=4;
		max_value: natural :=8);
port(clk:	in std_logic;
	R:	in std_logic;
	EN:	in std_logic;
	Q:	out std_logic_vector(nr_biti-1 downto 0);
	Carry: out std_logic
);
end counter_wrap;

architecture counter_wrap_arh of counter_wrap is
begin
    process(clk, EN, R)
	variable count: std_logic_vector(nr_biti-1 downto 0):=(others =&gt; '0');
	variable reached: std_logic :='0';
    begin
	if R = '1' then
 	    count := (others =&gt; '0');
		 reached:='0';
	elsif (clk='1' and clk'event) then 
		if EN = '1' then
			if (count &lt; max_value) then
		count := count + 1;
		else
		count := (others=&gt;'0');
		end if;
		if (count = max_value) then
		reached:='1';
		end if;
		if (count &lt; max_value) then
		reached:='0';
		end if;
		end if;
	end if;
	Q &lt;= count;
	Carry &lt;= reached;
    end process;
end counter_wrap_arh;



library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity adder is
   port(A     : in  std_logic_vector(15 downto 0);
        B     : in  std_logic_vector(15 downto 0);
        Y    : out std_logic_vector (15 downto 0);
        carry  : out std_logic
   );        
end adder;

architecture adder_arh of adder is
    signal temp : std_logic_vector(15 downto 0);
begin
    temp &lt;= std_logic_vector(unsigned(A) +unsigned(B));
    carry  &lt;= '1' when (A(15)=B(15) and to_integer(unsigned(temp)) &gt; 65535)
    else '0';
    Y &lt;= temp;
end adder_arh;


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity subtractor is
   port(A     : in  std_logic_vector(15 downto 0);
        B     : in  std_logic_vector(15 downto 0);
        Y    : out std_logic_vector (15 downto 0);
        borrow  : out std_logic
   );        
end subtractor;

architecture subtractor_arh of subtractor is
    signal temp : std_logic_vector(15 downto 0);
begin
    temp &lt;= std_logic_vector(unsigned(A) - unsigned(B));
    borrow &lt;= '1' when (to_integer(unsigned(A)) &lt; to_integer(unsigned(B)))
    else '0'; 
    Y &lt;= temp;
end subtractor_arh;	


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity comparator is
   port(A     : in  std_logic_vector(15 downto 0);
        B     : in  std_logic_vector(15 downto 0);
        smaller    : out std_logic;
		equal    : out std_logic;
		bigger    : out std_logic
   );        
end comparator;

architecture comparator_arh of comparator is
begin
    smaller &lt;= '1' when (to_integer(unsigned(A)) &lt; to_integer(unsigned(B)))
    else '0'; 
    equal &lt;= '1' when (to_integer(unsigned(A)) = to_integer(unsigned(B)))
    else '0'; 
	bigger &lt;= '1' when (to_integer(unsigned(A)) &gt; to_integer(unsigned(B)))
    else '0'; 
end comparator_arh;


library ieee ;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity registru is
generic(nr_biti: natural :=4);
port(clk:	in std_logic;
	R:	in std_logic;
	EN:	in std_logic;
	D:  in std_logic_vector(nr_biti-1 downto 0);
	Q:	out std_logic_vector(nr_biti-1 downto 0)
);
end registru;

architecture registru_arh of registru is
begin
    process(clk, EN, R)
	variable value: std_logic_vector(nr_biti-1 downto 0):=(others =&gt; '0');
    begin
	if R = '1' then
 	    value := (others =&gt; '0');
	elsif (clk='1' and clk'event) then 
	if EN = '1' then
		value := D;	
	end if;
	end if;
	Q &lt;= value;
    end process;	
end registru_arh;


library ieee ;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity multiplier is
	port(A: in std_logic_vector(15 downto 0);
	B: in std_logic_vector(15 downto 0);
	Y: out std_logic_vector(15 downto 0)
	);
end multiplier;

architecture multiplier_arh of multiplier is
begin
	process(A, B)
	variable rez: std_logic_vector(31 downto 0):=(others =&gt;'0');
	begin
		rez:=std_logic_vector(unsigned(A)*unsigned(B));
		Y&lt;=rez(15 downto 0);
	end process;
end multiplier_arh;	  

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;		 
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity ROM is
port(
	Address	: in std_logic_vector(3 downto 0);
	Data_out: out std_logic_vector(15 downto 0)
);
end ROM;

architecture Behav of ROM is

    type ROM_Array is array (0 to 15) 
	of std_logic_vector(15 downto 0);

    constant Content: ROM_Array := (
        0 =&gt; "0000000111110100",		
        1 =&gt; "0000000011001000",		
        2 =&gt; "0000000001100100",		
        3 =&gt; "0000000000110010",       		
        4 =&gt; "0000000000001010",		
        5 =&gt; "0000000000000101",       				
	OTHERS =&gt; "0000000000000000"		
	);       

begin
	Data_out &lt;= Content(conv_integer(Address));
end Behav;

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity SRAM is
port(	Clock:		in std_logic;	
	Write:		in std_logic;
	Addr:	in std_logic_vector(3 downto 0);
	Data_in: 	in std_logic_vector(15 downto 0);
	Data_out: 	out std_logic_vector(15 downto 0)
);
end SRAM;

architecture behav of SRAM is

type ram_type is array (0 to 15) of 
std_logic_vector(15 downto 0);
signal tmp_ram: ram_type:=(
					"0000000000000000", 
					"0000000000000000", 
					"0000000000000000", 
					"0000000000000000",
				   "0000000000000000",
				   "0000000000000000",
				   "0000000000000000",
				   "0000000000000000",
				   "0000000000000000",
				   "0000000000000000",
				   "0000000000000000",
				   "0000000000000000",
				   "0000000000000000",
				   "0000000000000000",
				   "0000000000000000",
				   "0000000000000000");
begin
	Data_out &lt;= tmp_ram(conv_integer(Addr));
    process(Clock, Write)
    begin
	if (Clock'event and Clock='1') then
		if Write='1' then
		    tmp_ram(conv_integer(Addr)) &lt;= Data_in;
	    end if;
	end if;
    end process;

end behav;

library ieee ;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity Div is
    port(A: in std_logic_vector(15 downto 0);
	B: in std_logic_vector(15 downto 0);
	Y: out std_logic_vector(15 downto 0);
	R: out std_logic_vector(15 downto 0)
	);
end Div;

architecture Behavioral_div of Div is 

begin
	process(A, B)
	variable rez: std_logic_vector(15 downto 0):=(others =&gt;'0');
	variable rez1: std_logic_vector(31 downto 0):=(others =&gt;'0');
	variable rez2: std_logic_vector(31 downto 0):=(others =&gt;'0');
	variable rez3: std_logic_vector(31 downto 0):=(others =&gt;'0');
	begin 
		rez3(15 downto 0):=A;
		rez:=std_logic_vector(unsigned(A)/unsigned(B));
		rez1:=std_logic_vector(unsigned(rez)*unsigned(B));
		rez2:=std_logic_vector(unsigned(rez3)-unsigned(rez1));
		Y&lt;=rez;
		R&lt;=rez2(15 downto 0);	
	end process;
end Behavioral_div;	 

library ieee ;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all; 


library ieee ;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity Div2 is
    port(A: in std_logic_vector(31 downto 0);
	B: in std_logic_vector(31 downto 0);
	Y: out std_logic_vector(31 downto 0);
	R: out std_logic_vector(31 downto 0)
	);
end Div2;

architecture Behavioral_div2 of Div2 is 

begin
	process(A, B)
	variable rez: std_logic_vector(31 downto 0):=(others =&gt;'0');
	variable rez1: std_logic_vector(63 downto 0):=(others =&gt;'0');
	variable rez2: std_logic_vector(63 downto 0):=(others =&gt;'0');
	variable rez3: std_logic_vector(63 downto 0):=(others =&gt;'0');
	begin 
		rez3(31 downto 0):=A;
		rez:=std_logic_vector(unsigned(A)/unsigned(B));
		rez1:=std_logic_vector(unsigned(rez)*unsigned(B));
		rez2:=std_logic_vector(unsigned(rez3)-unsigned(rez1));
		Y&lt;=rez;
		R&lt;=rez2(31 downto 0);	
	end process;
end Behavioral_div2;	 

library ieee ;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity bitex is
    port(A: in std_logic_vector(15 downto 0);
	R: out std_logic_vector(31 downto 0)
	);
end bitex;

architecture Behavioral_bitex of bitex is 

begin
	process(A)
	variable rez1: std_logic_vector(31 downto 0):=(others =&gt;'0');
	begin 
		rez1(15 downto 0):=A;
		R&lt;=rez1;	
	end process;
end Behavioral_bitex; 

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity adder2 is
   port(A     : in  std_logic_vector(31 downto 0);
        B     : in  std_logic_vector(31 downto 0);
        Y    : out std_logic_vector (31 downto 0);
        carry  : out std_logic
   );  
end adder2;

architecture adder2_arh of adder2 is
    signal temp : std_logic_vector(31 downto 0);
begin
    temp &lt;= std_logic_vector(unsigned(A) +unsigned(B));
    carry  &lt;= '1' when (A(31)=B(31) and A(31)='1')
    else '0';
    Y &lt;= temp;
end adder2_arh;

library ieee ;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity multiplier2 is
	port(A: in std_logic_vector(31 downto 0);
	B: in std_logic_vector(31 downto 0);
	Y: out std_logic_vector(31 downto 0)
	);
end multiplier2 ;

architecture multiplier2_arh of multiplier2 is
begin
	process(A, B)
	variable rez: std_logic_vector(63 downto 0):=(others =&gt;'0');
	begin
		rez:=std_logic_vector(unsigned(A)*unsigned(B));
		Y&lt;=rez(31 downto 0);
	end process;
end multiplier2_arh;

library ieee ;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity controlled_buffer2 is
	port(A : in std_logic_vector(3 downto 0); 
	EN: in std_logic;
	Y:out std_logic_vector(3 downto 0));
end controlled_buffer2;

architecture buffer2_arh of controlled_buffer2 is
begin
Y &lt;= A when (EN = '1') else (others =&gt; 'Z');
end buffer2_arh;

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity dmux_n is
port ( A : in  std_logic;
      sel : in std_logic_vector(3 downto 0);
       y0,y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y11,y12,y13,y14,y15: out std_logic:='0');
end dmux_n;

architecture dmuxn_arh of dmux_n is
begin
	process(sel,A)
	begin
case sel is
	when "0000"=&gt;
	y0&lt;=A;
	y1&lt;='0';
	y2&lt;='0';
	y3&lt;='0';
	y4&lt;='0';
	y5&lt;='0';
	y6&lt;='0';
	y7&lt;='0';
	y8&lt;='0';
	y9&lt;='0';
	y10&lt;='0';
	y11&lt;='0';
	y12&lt;='0';
	y13&lt;='0';
	y14&lt;='0';
	y15&lt;='0';
	when "0001"=&gt; 
	y0&lt;='0';
	y1&lt;=A;
	y2&lt;='0';
	y3&lt;='0';
	y4&lt;='0';
	y5&lt;='0';
	y6&lt;='0';
	y7&lt;='0';
	y8&lt;='0';
	y9&lt;='0';
	y10&lt;='0';
	y11&lt;='0';
	y12&lt;='0';
	y13&lt;='0';
	y14&lt;='0';
	y15&lt;='0';
	when "0010"=&gt; 
	y0&lt;='0';
	y1&lt;='0';
	y2&lt;=A;
	y3&lt;='0';
	y4&lt;='0';
	y5&lt;='0';
	y6&lt;='0';
	y7&lt;='0';
	y8&lt;='0';
	y9&lt;='0';
	y10&lt;='0';
	y11&lt;='0';
	y12&lt;='0';
	y13&lt;='0';
	y14&lt;='0';
	y15&lt;='0';
	when "0011"=&gt; 
	y0&lt;='0';
	y1&lt;='0';
	y2&lt;='0';
	y3&lt;=A;
	y4&lt;='0';
	y5&lt;='0';
	y6&lt;='0';
	y7&lt;='0';
	y8&lt;='0';
	y9&lt;='0';
	y10&lt;='0';
	y11&lt;='0';
	y12&lt;='0';
	y13&lt;='0';
	y14&lt;='0';
	y15&lt;='0';
	when "0100"=&gt;
	y0&lt;='0';
	y1&lt;='0';
	y2&lt;='0';
	y3&lt;='0';
	y4&lt;=A;
	y5&lt;='0';
	y6&lt;='0';
	y7&lt;='0';
	y8&lt;='0';
	y9&lt;='0';
	y10&lt;='0';
	y11&lt;='0';
	y12&lt;='0';
	y13&lt;='0';
	y14&lt;='0';
	y15&lt;='0';
	when "0101"=&gt;
	y0&lt;='0';
	y1&lt;='0';
	y2&lt;='0';
	y3&lt;='0';
	y4&lt;='0';
	y5&lt;=A;
	y6&lt;='0';
	y7&lt;='0';
	y8&lt;='0';
	y9&lt;='0';
	y10&lt;='0';
	y11&lt;='0';
	y12&lt;='0';
	y13&lt;='0';
	y14&lt;='0';
	y15&lt;='0';
	when "0110"=&gt; 
	y0&lt;='0';
	y1&lt;='0';
	y2&lt;='0';
	y3&lt;='0';
	y4&lt;='0';
	y5&lt;='0';
	y6&lt;=A;
	y7&lt;='0';
	y8&lt;='0';
	y9&lt;='0';
	y10&lt;='0';
	y11&lt;='0';
	y12&lt;='0';
	y13&lt;='0';
	y14&lt;='0';
	y15&lt;='0';
	when "0111"=&gt; 
	y0&lt;='0';
	y1&lt;='0';
	y2&lt;='0';
	y3&lt;='0';
	y4&lt;='0';
	y5&lt;='0';
	y6&lt;='0';
	y7&lt;=A;
	y8&lt;='0';
	y9&lt;='0';
	y10&lt;='0';
	y11&lt;='0';
	y12&lt;='0';
	y13&lt;='0';
	y14&lt;='0';
	y15&lt;='0';
	when "1000"=&gt;
	y0&lt;='0';
	y1&lt;='0';
	y2&lt;='0';
	y3&lt;='0';
	y4&lt;='0';
	y5&lt;='0';
	y6&lt;='0';
	y7&lt;='0';
	y8&lt;=A;
	y9&lt;='0';
	y10&lt;='0';
	y11&lt;='0';
	y12&lt;='0';
	y13&lt;='0';
	y14&lt;='0';
	y15&lt;='0';
	when "1001"=&gt;
	y0&lt;='0';
	y1&lt;='0';
	y2&lt;='0';
	y3&lt;='0';
	y4&lt;='0';
	y5&lt;='0';
	y6&lt;='0';
	y7&lt;='0';
	y8&lt;='0';
	y9&lt;=A;
	y10&lt;='0';
	y11&lt;='0';
	y12&lt;='0';
	y13&lt;='0';
	y14&lt;='0';
	y15&lt;='0';
	when "1010"=&gt; 
	y0&lt;='0';
	y1&lt;='0';
	y2&lt;='0';
	y3&lt;='0';
	y4&lt;='0';
	y5&lt;='0';
	y6&lt;='0';
	y7&lt;='0';
	y8&lt;='0';
	y9&lt;='0';
	y10&lt;=A;
	y11&lt;='0';
	y12&lt;='0';
	y13&lt;='0';
	y14&lt;='0';
	y15&lt;='0'; 
	when "1011"=&gt;
	y0&lt;='0';
	y1&lt;='0';
	y2&lt;='0';
	y3&lt;='0';
	y4&lt;='0';
	y5&lt;='0';
	y6&lt;='0';
	y7&lt;='0';
	y8&lt;='0';
	y9&lt;='0';
	y10&lt;='0';
	y11&lt;=A;
	y12&lt;='0';
	y13&lt;='0';
	y14&lt;='0';
	y15&lt;='0';
	when "1100"=&gt;
	y0&lt;='0';
	y1&lt;='0';
	y2&lt;='0';
	y3&lt;='0';
	y4&lt;='0';
	y5&lt;='0';
	y6&lt;='0';
	y7&lt;='0';
	y8&lt;='0';
	y9&lt;='0';
	y10&lt;='0';
	y11&lt;='0';
	y12&lt;=A;
	y13&lt;='0';
	y14&lt;='0';
	y15&lt;='0';
	when "1101"=&gt;
	y0&lt;='0';
	y1&lt;='0';
	y2&lt;='0';
	y3&lt;='0';
	y4&lt;='0';
	y5&lt;='0';
	y6&lt;='0';
	y7&lt;='0';
	y8&lt;='0';
	y9&lt;='0';
	y10&lt;='0';
	y11&lt;='0';
	y12&lt;='0';
	y13&lt;=A;
	y14&lt;='0';
	y15&lt;='0';
	when "1110"=&gt;
	y0&lt;='0';
	y1&lt;='0';
	y2&lt;='0';
	y3&lt;='0';
	y4&lt;='0';
	y5&lt;='0';
	y6&lt;='0';
	y7&lt;='0';
	y8&lt;='0';
	y9&lt;='0';
	y10&lt;='0';
	y11&lt;='0';
	y12&lt;='0';
	y13&lt;='0';
	y14&lt;=A;
	y15&lt;='0';
	when others=&gt;
	y0&lt;='0';
	y1&lt;='0';
	y2&lt;='0';
	y3&lt;='0';
	y4&lt;='0';
	y5&lt;='0';
	y6&lt;='0';
	y7&lt;='0';
	y8&lt;='0';
	y9&lt;='0';
	y10&lt;='0';
	y11&lt;='0';
	y12&lt;='0';
	y13&lt;='0';
	y14&lt;='0';
	y15&lt;=A;
end case;
end process;
end dmuxn_arh;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity comparator2 is
   port(A     : in  std_logic_vector(3 downto 0);
        B     : in  std_logic_vector(3 downto 0);
        smaller    : out std_logic;
		equal    : out std_logic;
		bigger    : out std_logic
   );        
end comparator2;

architecture comparator2_arh of comparator2 is
begin
    smaller &lt;= '1' when (to_integer(unsigned(A)) &lt; to_integer(unsigned(B)))
    else '0'; 
    equal &lt;= '1' when (to_integer(unsigned(A)) = to_integer(unsigned(B)))
    else '0'; 
	bigger &lt;= '1' when (to_integer(unsigned(A)) &gt; to_integer(unsigned(B)))
    else '0'; 
end comparator2_arh;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all; 

entity or3 is
	port(A: in std_logic;
	B,C: in std_logic;
	Y: out std_logic);
end or3;

architecture or3_arh of or3 is
begin
		Y &lt;=  A or B or C;
end or3_arh;

library ieee ;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity decodificator is
	port(sel: in std_logic_vector(2 downto 0);
	iesire: out std_logic_vector(7 downto 0)
	);
end decodificator ;

architecture decodificator_arh of decodificator is
begin
	process(sel)
	variable ies: std_logic_vector(7 downto 0):=(others =&gt;'0');
	begin
		case sel is
            when "000" =&gt; ies := "00000001";
			when "001" =&gt; ies := "00000010";
			when "010" =&gt; ies := "00000100";
			when "011" =&gt; ies := "00001000";
			when "100" =&gt; ies := "00010000";
			when "101" =&gt; ies := "00100000";
			when "110" =&gt; ies := "01000000";
			when others =&gt; ies := "10000000";	
		end case;
		iesire&lt;=ies;
	end process;
end decodificator_arh;




		
</vhdl>
  <vhdl name="introducere_suma">
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY introducere_suma IS&#13;
  PORT (&#13;
 		reset, enable, clk, validare: in std_logic;
 		nr_500, nr_100, nr_50, nr_10: in std_logic;
 		
    );&#13;
END introducere_suma;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF introducere_suma IS&#13;
&#13;
BEGIN&#13;
&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="memorie_cont">

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;


ENTITY memorie_cont IS
  PORT (
  		 pin_vechi: in std_logic_vector(3 downto 0);
		 clk, cs: in std_logic;
		 we: in std_logic;
		 pin_nou: in std_logic_vector(3 downto 0);
		 sold: out std_logic_vector(9 downto 0)
 		
    );
END memorie_cont;



ARCHITECTURE arch_memorie OF memorie_cont IS

type memorie is array(15 downto 0) of std_logic_vector(13 downto 0);
signal M: memorie:= (
     "00000000001110",    	
	"00010101101110",		
	"00100010011110",
	"00110111010100",
	"01000000111010",
	"01010111100101",
	"01100101011011",
	"01110001110111",
	"10000011110110",
	"10010111000110",
	"10100000111001",
	"10110110111100",
	"11000011110100",
	"11010100000010",
	"11100101001000",
	"11110111110101"
	 ); 
BEGIN

process(clk, pin_vechi, we, cs, pin_nou)
begin 
	if( cs = '1' and clk = '1' and clk'event) then
		if( we = '1') then
			M(conv_integer(pin_vechi)) &lt;= pin_nou;
		else
			sold &lt;= M(conv_integer(pin_vechi));
		end if;
	end if;
end process;

END arch_memorie;
</vhdl>
  <vhdl name="memorie_bancnote">
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;USE ieee.std_logic_unsigned.all;

ENTITY memorie_bancnote IS&#13;
  PORT (&#13;
		 nr_vechi: in std_logic_vector(3 downto 0);
		 clk, cs: in std_logic;
		 we: in std_logic;
		 nr_nou: in std_logic_vector(3 downto 0);
		 nr_curent: out std_logic_vector(3 downto 0)
    );&#13;
END memorie_bancnote;&#13;
&#13;

&#13;
ARCHITECTURE arch_memorie OF memorie_bancnote IS&#13;
&#13;
type memorie is array(3 downto 0) of std_logic_vector(3 downto 0);
signal M: memorie:= (
    	"1010",
    	"1010",
    	"1010",
    	"1010"
	 ); 
BEGIN

process(clk, nr_vechi, we, cs, nr_nou)
begin 
	if( cs = '1' and clk = '1' and clk'event) then
		if( we = '1') then
			M(conv_integer(nr_vechi)) &lt;= nr_nou;
		else
			nr_curent &lt;= M(conv_integer(nr_vechi));
		end if;
	end if;
end process;
&#13;
&#13;
END arch_memorie;&#13;
</vhdl>
</project>
